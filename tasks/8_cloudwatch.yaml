#################################################
############  vim cloudwatch.yml  ###############
#################################################

############ create auto-scaling policy ###########
- name: Configure Scaling Policies
  community.aws.autoscaling_policy:
    region: "{{ region }}"
    name: "{{ as_poliy_name_web }}"
    asg_name: "{{ web_asg_result.auto_scaling_group_name }}"
    state: "{{ state }}"
    adjustment_type: "{{ item.adjustment_type }}"
    min_adjustment_step: "{{ item.min_adjustment_step }}"
    scaling_adjustment: "{{ item.scaling_adjustment }}"
    cooldown: "{{ item.cooldown }}"
  with_items:
    - name: "Increase Group Size"
      adjustment_type: "ChangeInCapacity"
      scaling_adjustment: +1
      min_adjustment_step: 1
      cooldown: 60
    - name: "Decrease Group Size"
      adjustment_type: "ChangeInCapacity"
      scaling_adjustment: -1
      min_adjustment_step: 1
      cooldown: 60      
  register: as_policy_result 

############ metric alarm1 cpu =< 50 ###########
- name: Configure Metric Alarms and link to Scaling Policies
  amazon.aws.cloudwatch_metric_alarm:
    region: "{{ region }}"
    name: "{{ metric_alarm_web1 }}"
    state: "{{ state }}"
    metric: "CPUUtilization"
    namespace: "AWS/EC2"
    statistic: "Average"
    comparison: "GreaterThanOrEqualToThreshold"
    threshold: 50.0
    period: 60
    evaluation_periods: 5
    unit: "Percent"
    dimensions:
      AutoScalingGroupName: "{{ web_asg_result.auto_scaling_group_name }}"
    alarm_actions: "{{ as_policy_result.results[0].arn }}"   
  register: web1_metric_alarm_result 

############ metric alarm2 cpu => 20 ###########
- name: Configure Metric Alarms and link to Scaling Policies
  amazon.aws.cloudwatch_metric_alarm:
    region: "{{ region }}"
    name: "{{ metric_alarm_web2 }}"
    state: "{{ state }}"
    metric: "CPUUtilization"
    namespace: "AWS/EC2"
    statistic: "Average"
    comparison: "LessThanOrEqualToThreshold"
    threshold: 20.0
    period: 60
    evaluation_periods: 5
    unit: "Percent"
    dimensions:
      AutoScalingGroupName: "{{ web_asg_result.auto_scaling_group_name }}"
    alarm_actions: "{{ as_policy_result.results[1].arn }}"   
  register: web2_metric_alarm_result        